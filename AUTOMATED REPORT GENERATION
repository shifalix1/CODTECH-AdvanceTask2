import pandas as pd
from fpdf import FPDF
import matplotlib.pyplot as plt
import seaborn as sns
import os

# Step 1: Read Data from a File
def read_data(file_path):
    try:
        data = pd.read_csv(file_path)
        return data
    except FileNotFoundError:
        print("File not found. Please check the file path.")
        exit()

# Step 2: Analyze the Data
def analyze_data(data):
    summary = data.describe(include='all')
    return summary

# Step 3: Generate Visualizations
def generate_visualizations(data, output_dir):
    sns.set(style="whitegrid")

    # Generate a pairplot for numeric data
    pairplot_path = os.path.join(output_dir, "pairplot.png")
    sns.pairplot(data)
    plt.savefig(pairplot_path)
    plt.close()

    # Generate a correlation heatmap
    heatmap_path = os.path.join(output_dir, "heatmap.png")
    plt.figure(figsize=(10, 8))
    sns.heatmap(data.corr(), annot=True, cmap="coolwarm")
    plt.title("Correlation Heatmap")
    plt.savefig(heatmap_path)
    plt.close()

    return pairplot_path, heatmap_path

# Step 4: Generate PDF Report
def generate_pdf_report(summary, visualizations, output_file):
    pdf = FPDF()
    pdf.set_auto_page_break(auto=True, margin=15)

    # Add a title page
    pdf.add_page()
    pdf.set_font("Arial", 'B', 16)
    pdf.cell(0, 10, "Automated Data Analysis Report", ln=True, align='C')
    pdf.ln(10)

    # Add summary table
    pdf.set_font("Arial", size=12)
    pdf.cell(0, 10, "Data Summary:", ln=True)
    pdf.ln(5)
    for column in summary.columns:
        pdf.set_font("Arial", 'B', 10)
        pdf.cell(0, 10, f"Column: {column}", ln=True)
        pdf.set_font("Arial", size=10)
        pdf.multi_cell(0, 10, summary[column].to_string(index=True))
        pdf.ln(5)

    # Add visualizations
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.cell(0, 10, "Visualizations:", ln=True)
    pdf.ln(10)
    for vis in visualizations:
        pdf.image(vis, x=10, y=None, w=190)
        pdf.ln(85)  # Adjust spacing for next image

    # Save the PDF
    pdf.output(output_file)

# Main Script
def main():
    # Define file paths
    input_file = "data.csv"  # Input data file
    output_dir = "output"  # Directory to save outputs
    output_pdf = os.path.join(output_dir, "report.pdf")

    # Ensure output directory exists
    os.makedirs(output_dir, exist_ok=True)

    # Read, analyze, visualize, and generate report
    data = read_data(input_file)
    summary = analyze_data(data)
    visualizations = generate_visualizations(data, output_dir)
    generate_pdf_report(summary, visualizations, output_pdf)

    print(f"Report generated successfully: {output_pdf}")

if __name__ == "__main__":
    main()
